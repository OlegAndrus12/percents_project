import math

# визначення інших параметрів угод із відсотковими ставками
# 3.1. визначення деяких параметрів фінансових угод з простими ставками
# приклад 23

def f25(S, t, P):
    i = ((P - S) / (t * S)) * 366
    d = ((P - S) / (t * P)) * 360
    output =  f"i = {round(i*100, 2)} %|"
    output += f"d = {round(d*100, 2)} %"
    return output


# приклад 24
def f26(P1, P2, i, is_leap):
    days = 366 if is_leap else 365
    t = ((P2 / P1 - 1) / i) * days
    return f"Тривалість позики у днях : t = {round(t,2)}"

# 3.2 визначення деяких параметрів фінансових угод зі складними ставками
# приклад 25
def f27(P1, P2, i):
    n1 = math.log(P2/P1) / math.log(1 + i)
    n2 = math.log(P2/P1) / (4 * math.log(1 + i/4))
    output = f"Річна капіталізація : {round(n1, 2)} років|"
    output += f"Щоквартальна капіталізація : {round(n2, 2)} років"
    return output


# приклад 26
def f28(S0, S1, i1, S2, i2):
    res1 = pow(S1 / S0, 1 / i1) - 1
    res2 = pow(S2 / S0, 1 / i2) - 1
    output = f"Прибутковість вкладання грошей у сертифікат за умови {i1} зберігання становить : {round(res1 * 100, 2)} %|"
    output += f"Прибутковість вкладання грошей у сертифікат за умови {i2} зберігання становить : {round(res2 * 100, 2)} %"
    return output


# приклад 27
def f29(t, i):
    d = 1 - pow(i, 1/t)
    return f"Складна облікова ставка відсотка повинна становити {round(d * 100, 2)} % річних"


execution_queue = {
    f25 : [100000, 150, 120000],
    f26 : [10000, 15000, 0.25],
    f27 : [10000, 30000, 0.15],
    f28 : [1000, 1500, 3, 2000, 5],
    f29 : [3, 0.75],

}
'''
for i in execution_queue:
    i(*execution_queue[i])
    print("#" * 20)
'''   